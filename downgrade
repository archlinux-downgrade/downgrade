#!/usr/bin/env bash
# shellcheck disable=SC1091
. gettext.sh
export TEXTDOMAIN=downgrade
export TEXTDOMAINDIR=/usr/share/locale

read_pacman_conf() { sed '/^#\?'"$1"' *= *\(.*\)$/!d; s//\1/' "$PACMAN_CONF"; }

previously_installed() {
  # Delay this defaulting so #read_pacman_conf behavior is tested
  : "${PACMAN_LOG:=$(read_pacman_conf LogFile)}"
  : "${PACMAN_LOG:=/var/log/pacman.log}"

  sed '
    /.*\(installed\|upgraded\) \('"$1"'\) (\(.* -> \)\?\([^)]*\))/!d
    s//\2-\4/
  ' "$PACMAN_LOG"
}

present_packages() {
  local i=1

  (($#)) || return 1

  gettext 'Available packages:'
  printf "\n\n"

  for entry; do
    output_package "$((i++))" "$entry"
  done

  printf "\n"
  gettext 'select a package by number: '
}

read_selection() {
  local ans

  read -r ans

  ((ans > 0 && ans <= $#)) && printf "%s" "${!ans}"
}

prompt_to_ignore() {
  local pkg ans ln

  for pkg; do
    grep -Eq '^IgnorePkg.*( |=)'"$pkg"'( |$)' "$PACMAN_CONF" && return 0

    eval_gettext "add \$pkg to IgnorePkg? [y/n] "; read -r ans

    if [[ "${ans,,}" == $(gettext 'y')* ]]; then
      ln="$(grep -n -m 1 '^ *IgnorePkg' "$PACMAN_CONF" | cut -d : -f 1)"
      if [ -n "$ln" ]; then
        sudo sed -i "$ln s/.*/& $pkg/" "$PACMAN_CONF"
        continue
      fi

      ln="$(grep -n '^# *IgnorePkg' "$PACMAN_CONF" | tail -n 1 | cut -d : -f 1)"
      if [ -n "$ln" ]; then
        sudo sed -i "$ln s/.*/&\nIgnorePkg = $pkg/" "$PACMAN_CONF"
        continue
      fi

      printf "IgnorePkg = %s\n" "$pkg" | sudo tee -a "$PACMAN_CONF"
    fi
  done
}

search_packages() {
  local name version index

  if [[ "$1" =~ -([0-9R].*)$ ]]; then
    version=${BASH_REMATCH[1]}
    name=${1%-$version}
  else
    version='[0-9R]'
    name=$1
  fi

  index="$DOWNGRADE_ALA_URL/packages/${name:0:1}/$name/"

  if ((DOWNGRADE_FROM_ALA)); then
    curl --fail --silent "$index" | sed '
      /.* href="\('"$name-$version"'.*\(any\|'"$DOWNGRADE_ARCH"'\)\.pkg\.tar\.xz\)".*/!d;
      s||'"$index"'\1|g; s|+| |g; s|%|\\x|' | xargs -0 printf "%b"
  fi

  if ((DOWNGRADE_FROM_CACHE)); then
    # Delay this defaulting so #read_pacman_conf behavior is tested
    : "${PACMAN_CACHE:=$(read_pacman_conf CacheDir)}"
    : "${PACMAN_CACHE:=/var/cache/pacman/pkg/}"

    # shellcheck disable=SC2086
    find $PACMAN_CACHE -name "$name-$version*.pkg.tar.[gx]z"
  fi
}

sort_packages() {
  grep -Fv 'testing/' \
    | awk 'BEGIN { FS="/"; OFS="|" } { print $NF, $0 }' \
    | pacsort -f -r -t '|' -k 1 | cut -d '|' -f 2-
}

output_package() {
  local pkg indicator=" "

  for pkg in "${installed[@]}"; do
    case "$2" in
      *$pkg*)
        indicator="*"
        break
        ;;
    esac
  done

  printf "%s%3.4s) %s\n" "$indicator" "$1" "$(
    sed 's|https://.*/\([^/]\+\)$|\1 ('"$(gettext 'remote')"')|;
         s|^/.*/\([^/]\+\)$|\1 ('"$(gettext 'local')"')|;' <<< "$2")"
}

main() {
  local term candidates choice pkg exit_code=0

  (($#)) || return 1

  for term; do
    installed=( $(previously_installed "$term") )
    candidates=( $(search_packages "$term" | sort_packages) )

    if (( "${#candidates[@]}" == 1 )); then
      choice=${candidates[0]}
    elif present_packages "${candidates[@]}"; then
      choice="$(read_selection "${candidates[@]}")"
    fi

    if [[ -n "$choice" ]]; then
      to_ignore+=( "$term" )
      to_install+=( "${choice}" )
      continue
    fi

    exit_code=1
  done

  return $exit_code
}

# Up-convert older variables
: "${DOWNGRADE_ARCH:=$ARCH}"
: "${DOWNGRADE_ALA_URL:=$ALA_URL}"
: "${DOWNGRADE_ALA_URL:=$ARM_URL}"
: "${DOWNGRADE_NOSUDO:=$NOSUDO}"

[ "$NOALA" = "1" ] && DOWNGRADE_FROM_ALA=0
[ "$NOARM" = "1" ] && DOWNGRADE_FROM_ALA=0
[ "$NOCACHE" = "1" ] && DOWNGRADE_FROM_CACHE=0

# Set script defaults
: "${PACMAN:=pacman}"
: "${PACMAN_CONF:=/etc/pacman.conf}"
: "${DOWNGRADE_ARCH:=$(uname -m)}"
: "${DOWNGRADE_ALA_URL:=https://archive.archlinux.org}"
: "${DOWNGRADE_FROM_ALA:=1}"
: "${DOWNGRADE_FROM_CACHE:=1}"
: "${DOWNGRADE_NOSUDO:=0}"

declare -a terms
declare -a to_ignore
declare -a to_install
declare -a pacman_args
declare -a installed

while [[ -n "$1" ]]; do
  case "$1" in
    --) shift; pacman_args=( "$@" ); break ;;
    *)  terms+=( "$1" ); shift ;;
  esac
done

if (( ! "${#terms[@]}" )) && ((!LIB)); then
  ( gettext 'usage: downgrade <pkg>, ... [-- <pacman options>]'; echo
    gettext 'see downgrade(8) for details.'; echo
  ) >&2
  exit 1
fi

if ((DOWNGRADE_NOSUDO)) || ! type -p sudo &>/dev/null; then
  sudo() {
    printf -v cmd "%q " "$@"
    su root -c "$cmd"
  }
fi

if main "${terms[@]}"; then
  if sudo pacman -U "${pacman_args[@]}" "${to_install[@]}"; then
    prompt_to_ignore "${to_ignore[@]}"
  fi
fi
